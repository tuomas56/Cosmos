//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DebugModel", "AssemblyFileMethod", "AssemblyFile", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Cosmos.Debug.Common.AssemblyFile), "Method", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Cosmos.Debug.Common.Method), true)]
[assembly: EdmRelationshipAttribute("DebugModel", "DocumentMethod", "Document", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Cosmos.Debug.Common.Document), "Method", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Cosmos.Debug.Common.Method), true)]
[assembly: EdmRelationshipAttribute("DebugModel", "LabelMethod", "Label", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Cosmos.Debug.Common.Label), "Method", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Cosmos.Debug.Common.Method), true)]
[assembly: EdmRelationshipAttribute("DebugModel", "LabelMethodEnd", "Label", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Cosmos.Debug.Common.Label), "Method", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Cosmos.Debug.Common.Method), true)]
[assembly: EdmRelationshipAttribute("DebugModel", "MethodIlOpMethod", "MethodIlOp", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Cosmos.Debug.Common.MethodIlOp), "Method", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Cosmos.Debug.Common.Method), true)]

#endregion

namespace Cosmos.Debug.Common
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Entities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new Entities object using the connection string found in the 'Entities' section of the application configuration file.
        /// </summary>
        public Entities() : base("name=Entities", "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(string connectionString) : base(connectionString, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(EntityConnection connection) : base(connection, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FIELD_INFO> FIELD_INFO
        {
            get
            {
                if ((_FIELD_INFO == null))
                {
                    _FIELD_INFO = base.CreateObjectSet<FIELD_INFO>("FIELD_INFO");
                }
                return _FIELD_INFO;
            }
        }
        private ObjectSet<FIELD_INFO> _FIELD_INFO;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FIELD_MAPPING> FIELD_MAPPING
        {
            get
            {
                if ((_FIELD_MAPPING == null))
                {
                    _FIELD_MAPPING = base.CreateObjectSet<FIELD_MAPPING>("FIELD_MAPPING");
                }
                return _FIELD_MAPPING;
            }
        }
        private ObjectSet<FIELD_MAPPING> _FIELD_MAPPING;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Label> Labels
        {
            get
            {
                if ((_Labels == null))
                {
                    _Labels = base.CreateObjectSet<Label>("Labels");
                }
                return _Labels;
            }
        }
        private ObjectSet<Label> _Labels;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LOCAL_ARGUMENT_INFO> LOCAL_ARGUMENT_INFO
        {
            get
            {
                if ((_LOCAL_ARGUMENT_INFO == null))
                {
                    _LOCAL_ARGUMENT_INFO = base.CreateObjectSet<LOCAL_ARGUMENT_INFO>("LOCAL_ARGUMENT_INFO");
                }
                return _LOCAL_ARGUMENT_INFO;
            }
        }
        private ObjectSet<LOCAL_ARGUMENT_INFO> _LOCAL_ARGUMENT_INFO;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MethodIlOp> MethodIlOps
        {
            get
            {
                if ((_MethodIlOps == null))
                {
                    _MethodIlOps = base.CreateObjectSet<MethodIlOp>("MethodIlOps");
                }
                return _MethodIlOps;
            }
        }
        private ObjectSet<MethodIlOp> _MethodIlOps;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AssemblyFile> AssemblyFiles
        {
            get
            {
                if ((_AssemblyFiles == null))
                {
                    _AssemblyFiles = base.CreateObjectSet<AssemblyFile>("AssemblyFiles");
                }
                return _AssemblyFiles;
            }
        }
        private ObjectSet<AssemblyFile> _AssemblyFiles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Method> Methods
        {
            get
            {
                if ((_Methods == null))
                {
                    _Methods = base.CreateObjectSet<Method>("Methods");
                }
                return _Methods;
            }
        }
        private ObjectSet<Method> _Methods;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Document> Documents
        {
            get
            {
                if ((_Documents == null))
                {
                    _Documents = base.CreateObjectSet<Document>("Documents");
                }
                return _Documents;
            }
        }
        private ObjectSet<Document> _Documents;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FIELD_INFO EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFIELD_INFO(FIELD_INFO fIELD_INFO)
        {
            base.AddObject("FIELD_INFO", fIELD_INFO);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FIELD_MAPPING EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFIELD_MAPPING(FIELD_MAPPING fIELD_MAPPING)
        {
            base.AddObject("FIELD_MAPPING", fIELD_MAPPING);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Labels EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLabels(Label label)
        {
            base.AddObject("Labels", label);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LOCAL_ARGUMENT_INFO EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLOCAL_ARGUMENT_INFO(LOCAL_ARGUMENT_INFO lOCAL_ARGUMENT_INFO)
        {
            base.AddObject("LOCAL_ARGUMENT_INFO", lOCAL_ARGUMENT_INFO);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MethodIlOps EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMethodIlOps(MethodIlOp methodIlOp)
        {
            base.AddObject("MethodIlOps", methodIlOp);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AssemblyFiles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAssemblyFiles(AssemblyFile assemblyFile)
        {
            base.AddObject("AssemblyFiles", assemblyFile);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Methods EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMethods(Method method)
        {
            base.AddObject("Methods", method);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Documents EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDocuments(Document document)
        {
            base.AddObject("Documents", document);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DebugModel", Name="AssemblyFile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AssemblyFile : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AssemblyFile object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="pathname">Initial value of the Pathname property.</param>
        public static AssemblyFile CreateAssemblyFile(global::System.Guid id, global::System.String pathname)
        {
            AssemblyFile assemblyFile = new AssemblyFile();
            assemblyFile.ID = id;
            assemblyFile.Pathname = pathname;
            return assemblyFile;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Pathname
        {
            get
            {
                return _Pathname;
            }
            set
            {
                OnPathnameChanging(value);
                ReportPropertyChanging("Pathname");
                _Pathname = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Pathname");
                OnPathnameChanged();
            }
        }
        private global::System.String _Pathname;
        partial void OnPathnameChanging(global::System.String value);
        partial void OnPathnameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "AssemblyFileMethod", "Method")]
        public EntityCollection<Method> Methods
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Method>("DebugModel.AssemblyFileMethod", "Method");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Method>("DebugModel.AssemblyFileMethod", "Method", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DebugModel", Name="Document")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Document : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Document object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="pathname">Initial value of the Pathname property.</param>
        public static Document CreateDocument(global::System.Guid id, global::System.String pathname)
        {
            Document document = new Document();
            document.ID = id;
            document.Pathname = pathname;
            return document;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Pathname
        {
            get
            {
                return _Pathname;
            }
            set
            {
                OnPathnameChanging(value);
                ReportPropertyChanging("Pathname");
                _Pathname = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Pathname");
                OnPathnameChanged();
            }
        }
        private global::System.String _Pathname;
        partial void OnPathnameChanging(global::System.String value);
        partial void OnPathnameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "DocumentMethod", "Method")]
        public EntityCollection<Method> Methods
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Method>("DebugModel.DocumentMethod", "Method");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Method>("DebugModel.DocumentMethod", "Method", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DebugModel", Name="FIELD_INFO")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FIELD_INFO : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FIELD_INFO object.
        /// </summary>
        /// <param name="tYPE">Initial value of the TYPE property.</param>
        /// <param name="oFFSET">Initial value of the OFFSET property.</param>
        /// <param name="nAME">Initial value of the NAME property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static FIELD_INFO CreateFIELD_INFO(global::System.String tYPE, global::System.Int32 oFFSET, global::System.String nAME, global::System.Guid id)
        {
            FIELD_INFO fIELD_INFO = new FIELD_INFO();
            fIELD_INFO.TYPE = tYPE;
            fIELD_INFO.OFFSET = oFFSET;
            fIELD_INFO.NAME = nAME;
            fIELD_INFO.ID = id;
            return fIELD_INFO;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TYPE
        {
            get
            {
                return _TYPE;
            }
            set
            {
                OnTYPEChanging(value);
                ReportPropertyChanging("TYPE");
                _TYPE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TYPE");
                OnTYPEChanged();
            }
        }
        private global::System.String _TYPE;
        partial void OnTYPEChanging(global::System.String value);
        partial void OnTYPEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OFFSET
        {
            get
            {
                return _OFFSET;
            }
            set
            {
                OnOFFSETChanging(value);
                ReportPropertyChanging("OFFSET");
                _OFFSET = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OFFSET");
                OnOFFSETChanged();
            }
        }
        private global::System.Int32 _OFFSET;
        partial void OnOFFSETChanging(global::System.Int32 value);
        partial void OnOFFSETChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                OnNAMEChanging(value);
                ReportPropertyChanging("NAME");
                _NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NAME");
                OnNAMEChanged();
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DebugModel", Name="FIELD_MAPPING")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FIELD_MAPPING : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FIELD_MAPPING object.
        /// </summary>
        /// <param name="tYPE_NAME">Initial value of the TYPE_NAME property.</param>
        /// <param name="fIELD_NAME">Initial value of the FIELD_NAME property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static FIELD_MAPPING CreateFIELD_MAPPING(global::System.String tYPE_NAME, global::System.String fIELD_NAME, global::System.Guid id)
        {
            FIELD_MAPPING fIELD_MAPPING = new FIELD_MAPPING();
            fIELD_MAPPING.TYPE_NAME = tYPE_NAME;
            fIELD_MAPPING.FIELD_NAME = fIELD_NAME;
            fIELD_MAPPING.ID = id;
            return fIELD_MAPPING;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TYPE_NAME
        {
            get
            {
                return _TYPE_NAME;
            }
            set
            {
                OnTYPE_NAMEChanging(value);
                ReportPropertyChanging("TYPE_NAME");
                _TYPE_NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TYPE_NAME");
                OnTYPE_NAMEChanged();
            }
        }
        private global::System.String _TYPE_NAME;
        partial void OnTYPE_NAMEChanging(global::System.String value);
        partial void OnTYPE_NAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FIELD_NAME
        {
            get
            {
                return _FIELD_NAME;
            }
            set
            {
                OnFIELD_NAMEChanging(value);
                ReportPropertyChanging("FIELD_NAME");
                _FIELD_NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FIELD_NAME");
                OnFIELD_NAMEChanged();
            }
        }
        private global::System.String _FIELD_NAME;
        partial void OnFIELD_NAMEChanging(global::System.String value);
        partial void OnFIELD_NAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DebugModel", Name="Label")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Label : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Label object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="address">Initial value of the Address property.</param>
        public static Label CreateLabel(global::System.Guid id, global::System.String name, global::System.Int64 address)
        {
            Label label = new Label();
            label.ID = id;
            label.Name = name;
            label.Address = address;
            return label;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.Int64 _Address;
        partial void OnAddressChanging(global::System.Int64 value);
        partial void OnAddressChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "LabelMethod", "Method")]
        public EntityCollection<Method> MethodStart
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Method>("DebugModel.LabelMethod", "Method");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Method>("DebugModel.LabelMethod", "Method", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "LabelMethodEnd", "Method")]
        public EntityCollection<Method> MethodEnd
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Method>("DebugModel.LabelMethodEnd", "Method");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Method>("DebugModel.LabelMethodEnd", "Method", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DebugModel", Name="LOCAL_ARGUMENT_INFO")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LOCAL_ARGUMENT_INFO : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LOCAL_ARGUMENT_INFO object.
        /// </summary>
        /// <param name="mETHODLABELNAME">Initial value of the METHODLABELNAME property.</param>
        /// <param name="isArgument">Initial value of the IsArgument property.</param>
        /// <param name="iNDEXINMETHOD">Initial value of the INDEXINMETHOD property.</param>
        /// <param name="oFFSET">Initial value of the OFFSET property.</param>
        /// <param name="nAME">Initial value of the NAME property.</param>
        /// <param name="tYPENAME">Initial value of the TYPENAME property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static LOCAL_ARGUMENT_INFO CreateLOCAL_ARGUMENT_INFO(global::System.String mETHODLABELNAME, global::System.Boolean isArgument, global::System.Int32 iNDEXINMETHOD, global::System.Int32 oFFSET, global::System.String nAME, global::System.String tYPENAME, global::System.Guid id)
        {
            LOCAL_ARGUMENT_INFO lOCAL_ARGUMENT_INFO = new LOCAL_ARGUMENT_INFO();
            lOCAL_ARGUMENT_INFO.METHODLABELNAME = mETHODLABELNAME;
            lOCAL_ARGUMENT_INFO.IsArgument = isArgument;
            lOCAL_ARGUMENT_INFO.INDEXINMETHOD = iNDEXINMETHOD;
            lOCAL_ARGUMENT_INFO.OFFSET = oFFSET;
            lOCAL_ARGUMENT_INFO.NAME = nAME;
            lOCAL_ARGUMENT_INFO.TYPENAME = tYPENAME;
            lOCAL_ARGUMENT_INFO.ID = id;
            return lOCAL_ARGUMENT_INFO;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String METHODLABELNAME
        {
            get
            {
                return _METHODLABELNAME;
            }
            set
            {
                OnMETHODLABELNAMEChanging(value);
                ReportPropertyChanging("METHODLABELNAME");
                _METHODLABELNAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("METHODLABELNAME");
                OnMETHODLABELNAMEChanged();
            }
        }
        private global::System.String _METHODLABELNAME;
        partial void OnMETHODLABELNAMEChanging(global::System.String value);
        partial void OnMETHODLABELNAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsArgument
        {
            get
            {
                return _IsArgument;
            }
            set
            {
                OnIsArgumentChanging(value);
                ReportPropertyChanging("IsArgument");
                _IsArgument = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsArgument");
                OnIsArgumentChanged();
            }
        }
        private global::System.Boolean _IsArgument;
        partial void OnIsArgumentChanging(global::System.Boolean value);
        partial void OnIsArgumentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 INDEXINMETHOD
        {
            get
            {
                return _INDEXINMETHOD;
            }
            set
            {
                OnINDEXINMETHODChanging(value);
                ReportPropertyChanging("INDEXINMETHOD");
                _INDEXINMETHOD = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("INDEXINMETHOD");
                OnINDEXINMETHODChanged();
            }
        }
        private global::System.Int32 _INDEXINMETHOD;
        partial void OnINDEXINMETHODChanging(global::System.Int32 value);
        partial void OnINDEXINMETHODChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OFFSET
        {
            get
            {
                return _OFFSET;
            }
            set
            {
                OnOFFSETChanging(value);
                ReportPropertyChanging("OFFSET");
                _OFFSET = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OFFSET");
                OnOFFSETChanged();
            }
        }
        private global::System.Int32 _OFFSET;
        partial void OnOFFSETChanging(global::System.Int32 value);
        partial void OnOFFSETChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAME
        {
            get
            {
                return _NAME;
            }
            set
            {
                OnNAMEChanging(value);
                ReportPropertyChanging("NAME");
                _NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NAME");
                OnNAMEChanged();
            }
        }
        private global::System.String _NAME;
        partial void OnNAMEChanging(global::System.String value);
        partial void OnNAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TYPENAME
        {
            get
            {
                return _TYPENAME;
            }
            set
            {
                OnTYPENAMEChanging(value);
                ReportPropertyChanging("TYPENAME");
                _TYPENAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TYPENAME");
                OnTYPENAMEChanged();
            }
        }
        private global::System.String _TYPENAME;
        partial void OnTYPENAMEChanging(global::System.String value);
        partial void OnTYPENAMEChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DebugModel", Name="Method")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Method : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Method object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="typeToken">Initial value of the TypeToken property.</param>
        /// <param name="methodToken">Initial value of the MethodToken property.</param>
        /// <param name="assemblyFileID">Initial value of the AssemblyFileID property.</param>
        /// <param name="lineColStart">Initial value of the LineColStart property.</param>
        /// <param name="lineColEnd">Initial value of the LineColEnd property.</param>
        /// <param name="documentID">Initial value of the DocumentID property.</param>
        /// <param name="labelCall">Initial value of the LabelCall property.</param>
        public static Method CreateMethod(global::System.Guid id, global::System.Int32 typeToken, global::System.Int32 methodToken, global::System.Guid assemblyFileID, global::System.Int64 lineColStart, global::System.Int64 lineColEnd, global::System.Guid documentID, global::System.String labelCall)
        {
            Method method = new Method();
            method.ID = id;
            method.TypeToken = typeToken;
            method.MethodToken = methodToken;
            method.AssemblyFileID = assemblyFileID;
            method.LineColStart = lineColStart;
            method.LineColEnd = lineColEnd;
            method.DocumentID = documentID;
            method.LabelCall = labelCall;
            return method;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TypeToken
        {
            get
            {
                return _TypeToken;
            }
            set
            {
                OnTypeTokenChanging(value);
                ReportPropertyChanging("TypeToken");
                _TypeToken = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TypeToken");
                OnTypeTokenChanged();
            }
        }
        private global::System.Int32 _TypeToken;
        partial void OnTypeTokenChanging(global::System.Int32 value);
        partial void OnTypeTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MethodToken
        {
            get
            {
                return _MethodToken;
            }
            set
            {
                OnMethodTokenChanging(value);
                ReportPropertyChanging("MethodToken");
                _MethodToken = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MethodToken");
                OnMethodTokenChanged();
            }
        }
        private global::System.Int32 _MethodToken;
        partial void OnMethodTokenChanging(global::System.Int32 value);
        partial void OnMethodTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AssemblyFileID
        {
            get
            {
                return _AssemblyFileID;
            }
            set
            {
                OnAssemblyFileIDChanging(value);
                ReportPropertyChanging("AssemblyFileID");
                _AssemblyFileID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AssemblyFileID");
                OnAssemblyFileIDChanged();
            }
        }
        private global::System.Guid _AssemblyFileID;
        partial void OnAssemblyFileIDChanging(global::System.Guid value);
        partial void OnAssemblyFileIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LineColStart
        {
            get
            {
                return _LineColStart;
            }
            set
            {
                OnLineColStartChanging(value);
                ReportPropertyChanging("LineColStart");
                _LineColStart = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LineColStart");
                OnLineColStartChanged();
            }
        }
        private global::System.Int64 _LineColStart;
        partial void OnLineColStartChanging(global::System.Int64 value);
        partial void OnLineColStartChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LineColEnd
        {
            get
            {
                return _LineColEnd;
            }
            set
            {
                OnLineColEndChanging(value);
                ReportPropertyChanging("LineColEnd");
                _LineColEnd = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LineColEnd");
                OnLineColEndChanged();
            }
        }
        private global::System.Int64 _LineColEnd;
        partial void OnLineColEndChanging(global::System.Int64 value);
        partial void OnLineColEndChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid DocumentID
        {
            get
            {
                return _DocumentID;
            }
            set
            {
                OnDocumentIDChanging(value);
                ReportPropertyChanging("DocumentID");
                _DocumentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DocumentID");
                OnDocumentIDChanged();
            }
        }
        private global::System.Guid _DocumentID;
        partial void OnDocumentIDChanging(global::System.Guid value);
        partial void OnDocumentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> LabelStartID
        {
            get
            {
                return _LabelStartID;
            }
            set
            {
                OnLabelStartIDChanging(value);
                ReportPropertyChanging("LabelStartID");
                _LabelStartID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LabelStartID");
                OnLabelStartIDChanged();
            }
        }
        private Nullable<global::System.Guid> _LabelStartID;
        partial void OnLabelStartIDChanging(Nullable<global::System.Guid> value);
        partial void OnLabelStartIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> LabelEndID
        {
            get
            {
                return _LabelEndID;
            }
            set
            {
                OnLabelEndIDChanging(value);
                ReportPropertyChanging("LabelEndID");
                _LabelEndID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LabelEndID");
                OnLabelEndIDChanged();
            }
        }
        private Nullable<global::System.Guid> _LabelEndID;
        partial void OnLabelEndIDChanging(Nullable<global::System.Guid> value);
        partial void OnLabelEndIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LabelCall
        {
            get
            {
                return _LabelCall;
            }
            set
            {
                OnLabelCallChanging(value);
                ReportPropertyChanging("LabelCall");
                _LabelCall = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LabelCall");
                OnLabelCallChanged();
            }
        }
        private global::System.String _LabelCall;
        partial void OnLabelCallChanging(global::System.String value);
        partial void OnLabelCallChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "AssemblyFileMethod", "AssemblyFile")]
        public AssemblyFile AssemblyFile
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AssemblyFile>("DebugModel.AssemblyFileMethod", "AssemblyFile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AssemblyFile>("DebugModel.AssemblyFileMethod", "AssemblyFile").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AssemblyFile> AssemblyFileReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AssemblyFile>("DebugModel.AssemblyFileMethod", "AssemblyFile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AssemblyFile>("DebugModel.AssemblyFileMethod", "AssemblyFile", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "DocumentMethod", "Document")]
        public Document Document
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Document>("DebugModel.DocumentMethod", "Document").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Document>("DebugModel.DocumentMethod", "Document").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Document> DocumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Document>("DebugModel.DocumentMethod", "Document");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Document>("DebugModel.DocumentMethod", "Document", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "LabelMethod", "Label")]
        public Label LabelStart
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Label>("DebugModel.LabelMethod", "Label").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Label>("DebugModel.LabelMethod", "Label").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Label> LabelStartReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Label>("DebugModel.LabelMethod", "Label");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Label>("DebugModel.LabelMethod", "Label", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "LabelMethodEnd", "Label")]
        public Label LabelEnd
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Label>("DebugModel.LabelMethodEnd", "Label").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Label>("DebugModel.LabelMethodEnd", "Label").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Label> LabelEndReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Label>("DebugModel.LabelMethodEnd", "Label");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Label>("DebugModel.LabelMethodEnd", "Label", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "MethodIlOpMethod", "MethodIlOp")]
        public EntityCollection<MethodIlOp> MethodIlOps
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MethodIlOp>("DebugModel.MethodIlOpMethod", "MethodIlOp");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MethodIlOp>("DebugModel.MethodIlOpMethod", "MethodIlOp", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DebugModel", Name="MethodIlOp")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MethodIlOp : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MethodIlOp object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="labelName">Initial value of the LabelName property.</param>
        /// <param name="stackDiff">Initial value of the StackDiff property.</param>
        /// <param name="ilOffset">Initial value of the IlOffset property.</param>
        public static MethodIlOp CreateMethodIlOp(global::System.Guid id, global::System.String labelName, global::System.Int32 stackDiff, global::System.Int32 ilOffset)
        {
            MethodIlOp methodIlOp = new MethodIlOp();
            methodIlOp.ID = id;
            methodIlOp.LabelName = labelName;
            methodIlOp.StackDiff = stackDiff;
            methodIlOp.IlOffset = ilOffset;
            return methodIlOp;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Guid _ID;
        partial void OnIDChanging(global::System.Guid value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LabelName
        {
            get
            {
                return _LabelName;
            }
            set
            {
                OnLabelNameChanging(value);
                ReportPropertyChanging("LabelName");
                _LabelName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LabelName");
                OnLabelNameChanged();
            }
        }
        private global::System.String _LabelName;
        partial void OnLabelNameChanging(global::System.String value);
        partial void OnLabelNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StackDiff
        {
            get
            {
                return _StackDiff;
            }
            set
            {
                OnStackDiffChanging(value);
                ReportPropertyChanging("StackDiff");
                _StackDiff = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StackDiff");
                OnStackDiffChanged();
            }
        }
        private global::System.Int32 _StackDiff;
        partial void OnStackDiffChanging(global::System.Int32 value);
        partial void OnStackDiffChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IlOffset
        {
            get
            {
                return _IlOffset;
            }
            set
            {
                OnIlOffsetChanging(value);
                ReportPropertyChanging("IlOffset");
                _IlOffset = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IlOffset");
                OnIlOffsetChanged();
            }
        }
        private global::System.Int32 _IlOffset;
        partial void OnIlOffsetChanging(global::System.Int32 value);
        partial void OnIlOffsetChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> MethodID
        {
            get
            {
                return _MethodID;
            }
            set
            {
                OnMethodIDChanging(value);
                ReportPropertyChanging("MethodID");
                _MethodID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MethodID");
                OnMethodIDChanged();
            }
        }
        private Nullable<global::System.Guid> _MethodID;
        partial void OnMethodIDChanging(Nullable<global::System.Guid> value);
        partial void OnMethodIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DebugModel", "MethodIlOpMethod", "Method")]
        public Method Method
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Method>("DebugModel.MethodIlOpMethod", "Method").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Method>("DebugModel.MethodIlOpMethod", "Method").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Method> MethodReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Method>("DebugModel.MethodIlOpMethod", "Method");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Method>("DebugModel.MethodIlOpMethod", "Method", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
